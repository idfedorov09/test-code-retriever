#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è GPU –ø–∞–º—è—Ç—å—é
"""

import os
import sys
import time
from gpu_utils import GPUMemoryManager, cleanup_gpu, monitor_gpu, get_gpu_info

def test_memory_management():
    """–¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é"""
    print("üß™ –¢–ï–°–¢ –£–ü–†–ê–í–õ–ï–ù–ò–Ø GPU –ü–ê–ú–Ø–¢–¨–Æ")
    print("=" * 50)
    
    # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä
    manager = GPUMemoryManager()
    
    print("\nüìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:")
    monitor_gpu()
    
    if not manager.cuda_available:
        print("\n‚ùå CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Ç–µ—Å—Ç –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω")
        return
    
    print("\nüîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É –ø–∞–º—è—Ç–∏...")
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
    try:
        import torch
        
        # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–∏–µ —Ç–µ–Ω–∑–æ—Ä—ã
        print("üìà –°–æ–∑–¥–∞–µ–º —Ç–µ–Ω–∑–æ—Ä—ã –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ –Ω–∞–≥—Ä—É–∑–∫–∏...")
        tensors = []
        
        for i in range(5):
            tensor = torch.randn(1000, 1000, device='cuda')
            tensors.append(tensor)
            print(f"   –¢–µ–Ω–∑–æ—Ä {i+1} —Å–æ–∑–¥–∞–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å
            info = get_gpu_info()
            if info.get('memory_usage_percent', 0) > 50:
                print(f"   üíæ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {info['memory_usage_percent']:.1f}%")
        
        print("\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ–Ω–∑–æ—Ä–æ–≤:")
        monitor_gpu()
        
        # –û—á–∏—â–∞–µ–º —Ç–µ–Ω–∑–æ—Ä—ã
        print("\nüßπ –£–¥–∞–ª—è–µ–º —Ç–µ–Ω–∑–æ—Ä—ã...")
        del tensors
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É
        print("üßπ –í—ã–ø–æ–ª–Ω—è–µ–º cleanup_gpu()...")
        cleanup_gpu()
        
        print("\nüìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏:")
        monitor_gpu()
        
        print("\n‚úÖ –¢–µ—Å—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞: {e}")
        cleanup_gpu()

def test_memory_monitoring():
    """–¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–∞–º—è—Ç–∏"""
    print("\nüîç –¢–ï–°–¢ –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ü–ê–ú–Ø–¢–ò")
    print("=" * 30)
    
    manager = GPUMemoryManager()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    info = manager.get_gpu_memory_info()
    
    print("\nüìã –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ GPU:")
    for key, value in info.items():
        if isinstance(value, float):
            print(f"   {key}: {value:.2f}")
        else:
            print(f"   {key}: {value}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ—Ä–æ–≥–∏
    print(f"\nüö® –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä–æ–≥–æ–≤:")
    print(f"   –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –ø–æ—Ä–æ–≥ (85%): {'‚ö†Ô∏è  –ü–†–ï–í–´–®–ï–ù' if manager.check_memory_threshold(85) else '‚úÖ –û–ö'}")
    print(f"   –í—ã—Å–æ–∫–∏–π –ø–æ—Ä–æ–≥ (75%): {'‚ö†Ô∏è  –ü–†–ï–í–´–®–ï–ù' if manager.check_memory_threshold(75) else '‚úÖ –û–ö'}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
    optimal_batch = manager.get_optimal_batch_size()
    print(f"\n‚ö° –û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {optimal_batch}")

def stress_test():
    """–°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏"""
    print("\nüí™ –°–¢–†–ï–°–°-–¢–ï–°–¢")
    print("=" * 20)
    
    if not GPUMemoryManager().cuda_available:
        print("‚ùå CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –ø—Ä–æ–ø—É—â–µ–Ω")
        return
    
    try:
        import torch
        
        print("üî• –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ç–µ–Ω–∑–æ—Ä–æ–≤...")
        
        for cycle in range(3):
            print(f"\nüîÑ –¶–∏–∫–ª {cycle + 1}/3")
            
            # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–≥–æ —Ç–µ–Ω–∑–æ—Ä–æ–≤
            tensors = []
            for i in range(10):
                try:
                    tensor = torch.randn(500, 500, device='cuda')
                    tensors.append(tensor)
                except RuntimeError as e:
                    if "out of memory" in str(e):
                        print("   ‚ö†Ô∏è  –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–∞–º—è—Ç–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É...")
                        cleanup_gpu()
                        break
                    else:
                        raise
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            info = get_gpu_info()
            if 'memory_usage_percent' in info:
                print(f"   üìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: {info['memory_usage_percent']:.1f}%")
            
            # –û—á–∏—â–∞–µ–º
            del tensors
            cleanup_gpu()
            
            time.sleep(1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
        
        print("\n‚úÖ –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞: {e}")
        cleanup_gpu()

if __name__ == "__main__":
    print("üöÄ –°–ò–°–¢–ï–ú–ê –£–ü–†–ê–í–õ–ï–ù–ò–Ø GPU –ü–ê–ú–Ø–¢–¨–Æ - –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï")
    print("=" * 60)
    
    try:
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
        test_memory_management()
        
        # –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        test_memory_monitoring()
        
        # –°—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if "--stress" in sys.argv:
            stress_test()
        
        print(f"\nüéâ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´!")
        print(f"üí° –î–ª—è —Å—Ç—Ä–µ—Å—Å-—Ç–µ—Å—Ç–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python {sys.argv[0]} --stress")
        
    except KeyboardInterrupt:
        print("\nüõë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        cleanup_gpu()
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        cleanup_gpu()
    finally:
        print("\nüßπ –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞...")
        cleanup_gpu()
