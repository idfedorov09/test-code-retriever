#!/usr/bin/env python3
"""
–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –≤–µ—Ä—Å–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è RAG —Å–∏—Å—Ç–µ–º—ã.
–°–æ–∑–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞ —Ä–∞–∑ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–∞–º—è—Ç—å—é.
"""

import os
import gc
import sys
from dotenv import load_dotenv
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é
try:
    from gpu_utils import GPUMemoryManager, cleanup_gpu, monitor_gpu, aggressive_cleanup_gpu
    GPU_UTILS_AVAILABLE = True
    gpu_manager = GPUMemoryManager()
    print("‚úÖ GPU —É—Ç–∏–ª–∏—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã")
except ImportError:
    GPU_UTILS_AVAILABLE = False
    print("‚ö†Ô∏è  GPU —É—Ç–∏–ª–∏—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

# GPU detection and configuration
try:
    import torch
    GPU_AVAILABLE = torch.cuda.is_available()
    DEVICE = "cuda" if GPU_AVAILABLE else "cpu"
    print(f"üöÄ Device: {DEVICE}")
    if GPU_AVAILABLE:
        print(f"üì± GPU: {torch.cuda.get_device_name(0)}")
        print(f"üíæ VRAM: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ª—É—á—à–µ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞–º—è—Ç—å—é
        os.environ['PYTORCH_CUDA_ALLOC_CONF'] = 'expandable_segments:True'
        print("‚öôÔ∏è  –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True")
        
except ImportError:
    GPU_AVAILABLE = False
    DEVICE = "cpu"
    print("‚ö†Ô∏è  PyTorch –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã –∏ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
from rag_base import RAGSystemFactory
from rag_python import PythonRAGSystem
from rag_universal import UniversalRAGSystem

# LangChain imports
from langchain_community.llms import YandexGPT
from langchain_huggingface import HuggingFaceEmbeddings
from langchain_community.embeddings import HuggingFaceBgeEmbeddings


def load_model_safe(model_name, local_dir="./models", wrapper_cls=HuggingFaceEmbeddings, use_gpu=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –ø–∞–º—è—Ç–∏.
    """
    if use_gpu is None:
        use_gpu = GPU_AVAILABLE
    
    # –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π
    if GPU_UTILS_AVAILABLE and use_gpu:
        print("üßπ –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ –∑–∞–≥—Ä—É–∑–∫–æ–π –º–æ–¥–µ–ª–∏...")
        aggressive_cleanup_gpu()
        monitor_gpu()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –ø–∞–º—è—Ç–∏
        memory_info = gpu_manager.get_gpu_memory_info()
        if memory_info.get('free_memory_gb', 0) < 10:
            print("‚ö†Ô∏è  –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–π –ø–∞–º—è—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU")
            use_gpu = False
    
    local_path = Path(local_dir) / model_name.replace("/", "_")
    
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å —É—á–µ—Ç–æ–º –¥–æ—Å—Ç—É–ø–Ω–æ–π –ø–∞–º—è—Ç–∏
    model_kwargs = {}
    encode_kwargs = {}
    
    if use_gpu and GPU_AVAILABLE:
        # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è GPU
        batch_size = 16  # –£–º–µ–Ω—å—à–µ–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞
        if GPU_UTILS_AVAILABLE:
            optimal_batch = gpu_manager.get_optimal_batch_size(16)
            batch_size = min(optimal_batch, 16)  # –ù–µ –±–æ–ª—å—à–µ 16
            print(f"‚ö° –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
        
        model_kwargs.update({
            'device': DEVICE,
            'trust_remote_code': True,
        })
        encode_kwargs.update({
            'batch_size': batch_size,
        })
        print(f"üî• –ó–∞–≥—Ä—É–∂–∞–µ–º {model_name} –Ω–∞ GPU (–∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω–æ)")
    else:
        model_kwargs.update({
            'device': 'cpu',
        })
        encode_kwargs.update({
            'batch_size': 8,
        })
        print(f"üêå –ó–∞–≥—Ä—É–∂–∞–µ–º {model_name} –Ω–∞ CPU")
    
    try:
        if local_path.exists():
            model = wrapper_cls(
                model_name=str(local_path),
                model_kwargs=model_kwargs,
                encode_kwargs=encode_kwargs
            )
        else:
            model = wrapper_cls(
                model_name=model_name,
                model_kwargs=model_kwargs,
                encode_kwargs=encode_kwargs
            )
            # –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ
            try:
                if hasattr(model, 'client'):
                    model.client.save(str(local_path))
                elif hasattr(model, '_client'):
                    model._client.save(str(local_path))
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º–æ–¥–µ–ª—å –ª–æ–∫–∞–ª—å–Ω–æ: {e}")
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
        if GPU_UTILS_AVAILABLE and use_gpu:
            print("üìä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏:")
            monitor_gpu()
        
        return model
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ {model_name}: {e}")
        if GPU_UTILS_AVAILABLE:
            aggressive_cleanup_gpu()
        raise


def create_single_rag_tool(rag_type: str, project_path: str, use_gpu: bool = None):
    """
    –°–æ–∑–¥–∞–µ—Ç –æ–¥–∏–Ω RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é –¥–ª—è –ø–∞–º—è—Ç–∏.
    """
    print(f"\nüîß –°–û–ó–î–ê–ù–ò–ï {rag_type.upper()} RAG –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê")
    print("=" * 60)
    
    # –ù–∞—á–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞
    if GPU_UTILS_AVAILABLE:
        print("üßπ –ù–∞—á–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏...")
        aggressive_cleanup_gpu()
        monitor_gpu()
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM
        llm = YandexGPT(
            iam_token=os.getenv('YANDEX_GPT_API_KEY'),
            folder_id=os.getenv('YANDEX_GPT_FOLDER_ID'),
            model_name="yandexgpt"
        )
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
        if rag_type == "auto":
            rag_type = RAGSystemFactory.detect_project_type(project_path)
            print(f"üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–∏–ø –ø—Ä–æ–µ–∫—Ç–∞: {rag_type}")
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
        if rag_type == "python":
            embeddings = load_model_safe(
                model_name="BAAI/llm-embedder",
                wrapper_cls=HuggingFaceBgeEmbeddings,
                use_gpu=use_gpu
            )
        else:
            embeddings = load_model_safe(
                model_name="BAAI/bge-code-v1",
                use_gpu=use_gpu
            )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ RAG —Å–∏—Å—Ç–µ–º—ã
        print(f"üèóÔ∏è  –°–æ–∑–¥–∞–µ–º {rag_type.upper()} RAG —Å–∏—Å—Ç–µ–º—É...")
        
        rag_system = RAGSystemFactory.create(
            rag_type,
            llm=llm,
            embeddings=embeddings,
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        tool = rag_system.create_tool(project_path)
        
        print(f"‚úÖ {rag_type.upper()} RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤!")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        if GPU_UTILS_AVAILABLE:
            print("üìä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏:")
            monitor_gpu()
        
        return tool
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è {rag_type} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞: {e}")
        if GPU_UTILS_AVAILABLE:
            aggressive_cleanup_gpu()
        raise


def main():
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    
    project_path = os.getenv('TEST_PROJ_PATH')
    if not project_path:
        print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TEST_PROJ_PATH")
        return
    
    print("üõ°Ô∏è  –ë–ï–ó–û–ü–ê–°–ù–´–ô –†–ï–ñ–ò–ú –°–û–ó–î–ê–ù–ò–Ø RAG –ò–ù–°–¢–†–£–ú–ï–ù–¢–û–í")
    print("=" * 60)
    
    if len(sys.argv) > 1:
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–π —Ç–∏–ø
        rag_type = sys.argv[1].lower()
        if rag_type not in ['python', 'universal', 'auto']:
            print("‚ùå –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ç–∏–ø—ã: python, universal, auto")
            return
        
        try:
            tool = create_single_rag_tool(rag_type, project_path, use_gpu=True)
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç
            print(f"\nüß™ –¢–ï–°–¢ {rag_type.upper()} –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê")
            print("=" * 40)
            
            test_question = "–ü–æ–∫–∞–∂–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"
            print(f"‚ùì –í–æ–ø—Ä–æ—Å: {test_question}")
            
            result = tool.invoke(test_question)
            print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω ({len(result)} —Å–∏–º–≤–æ–ª–æ–≤)")
            print(f"üìÑ –ü–µ—Ä–≤—ã–µ 200 —Å–∏–º–≤–æ–ª–æ–≤: {result[:200]}...")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    
    else:
        print("üí° –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("   python rag_main_safe.py python     # –°–æ–∑–¥–∞—Ç—å Python RAG")
        print("   python rag_main_safe.py universal  # –°–æ–∑–¥–∞—Ç—å Universal RAG")
        print("   python rag_main_safe.py auto       # –ê–≤—Ç–æ–≤—ã–±–æ—Ä —Ç–∏–ø–∞")
        print("\nüéØ –≠—Ç–æ—Ç —Ä–µ–∂–∏–º —Å–æ–∑–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –∑–∞ —Ä–∞–∑")
        print("   –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –ø–∞–º—è—Ç—å—é GPU")


def cleanup_on_exit():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
    if GPU_UTILS_AVAILABLE:
        try:
            aggressive_cleanup_gpu()
            print("‚úÖ GPU –ø–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ GPU: {e}")
    gc.collect()
    print("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")


if __name__ == "__main__":
    import signal
    import atexit
    
    def signal_handler(sig, frame):
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        cleanup_on_exit()
        sys.exit(0)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    atexit.register(cleanup_on_exit)
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    try:
        main()
    except KeyboardInterrupt:
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        if GPU_UTILS_AVAILABLE:
            aggressive_cleanup_gpu()
    finally:
        cleanup_on_exit()
