#!/usr/bin/env python3
"""
–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –Ω–æ–≤–æ–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–π RAG —Å–∏—Å—Ç–µ–º—ã.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python cli_new.py "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å PrefixedDBModel?" --type=python
    python cli_new.py "–ö–∞–∫–∏–µ –µ—Å—Ç—å Docker —Ñ–∞–π–ª—ã?" --type=universal
    python cli_new.py "–ü–æ–∫–∞–∂–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞" --type=auto
"""

import argparse
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

def main():
    parser = argparse.ArgumentParser(
        description="–ù–æ–≤–∞—è –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–∞—è RAG —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å PrefixedDBModel?" --type=python
  %(prog)s "–ö–∞–∫–∏–µ –µ—Å—Ç—å Docker —Ñ–∞–π–ª—ã?" --type=universal  
  %(prog)s "–ü–æ–∫–∞–∂–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞" --type=auto
  %(prog)s "–ï—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é?" --type=auto --gpu
        """
    )
    
    parser.add_argument(
        "question",
        help="–í–æ–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–µ–∫—Ç–∞"
    )
    
    parser.add_argument(
        "--type", "-t",
        choices=["python", "universal", "auto"],
        default="auto",
        help="–¢–∏–ø RAG —Å–∏—Å—Ç–µ–º—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: auto)"
    )
    
    parser.add_argument(
        "--gpu",
        action="store_true",
        help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å GPU"
    )
    
    parser.add_argument(
        "--no-gpu",
        action="store_true", 
        help="–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å CPU"
    )
    
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )
    
    parser.add_argument(
        "--project-path", "-p",
        help="–ü—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ TEST_PROJ_PATH)"
    )
    
    args = parser.parse_args()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ GPU
    use_gpu = None
    if args.gpu:
        use_gpu = True
    elif args.no_gpu:
        use_gpu = False
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
    project_path = args.project_path or os.getenv('TEST_PROJ_PATH')
    if not project_path:
        print("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É —á–µ—Ä–µ–∑ --project-path –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TEST_PROJ_PATH")
        sys.exit(1)
    
    if not os.path.exists(project_path):
        print(f"‚ùå –ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {project_path}")
        sys.exit(1)
    
    if args.verbose:
        print(f"üîç –í–æ–ø—Ä–æ—Å: {args.question}")
        print(f"üõ†Ô∏è  –¢–∏–ø RAG: {args.type}")
        print(f"üìÅ –ü—Ä–æ–µ–∫—Ç: {project_path}")
        print(f"üéÆ GPU: {use_gpu}")
        print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–æ–∑–¥–∞–Ω–∏—è RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
        print("üìö –ó–∞–≥—Ä—É–∂–∞–µ–º RAG —Å–∏—Å—Ç–µ–º—É...")
        from rag_main import create_rag_tool
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        tool = create_rag_tool(
            project_path=project_path,
            rag_type=args.type,
            use_gpu=use_gpu
        )
        
        if args.verbose:
            print("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å...\n")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = tool.invoke(args.question)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("=" * 60)
        print(result)
        print("=" * 60)
        
        if args.verbose:
            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å –ø–æ–º–æ—â—å—é {args.type.upper()} RAG")
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã RAG —Å–∏—Å—Ç–µ–º—ã –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
