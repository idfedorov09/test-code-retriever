#!/usr/bin/env python3
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∫ —É–∂–µ –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–æ–º—É –∏–Ω–¥–µ–∫—Å—É.

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python cli.py "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å PrefixedDBModel?" --tool=tool_llm_encoder
    python cli.py "–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–∑—ã–≤–∞—é—Ç –º–µ—Ç–æ–¥ render?" --tool=tool_bge_code
"""

import argparse
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

def main():
    parser = argparse.ArgumentParser(
        description="RAG —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ Python –∫–æ–¥–∞",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å PrefixedDBModel?" --tool=tool_llm_encoder
  %(prog)s "–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–∑—ã–≤–∞—é—Ç –º–µ—Ç–æ–¥ render?" --tool=tool_bge_code
  %(prog)s "–ü–æ–∫–∞–∂–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞" --tool=auto
        """
    )
    
    parser.add_argument(
        "question",
        help="–í–æ–ø—Ä–æ—Å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞"
    )
    
    parser.add_argument(
        "--tool", "-t",
        choices=["tool_llm_encoder", "tool_bge_code", "auto"],
        default="auto",
        help="–í—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ RAG (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: auto)"
    )
    
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )
    
    args = parser.parse_args()
    
    if args.verbose:
        print(f"üîç –í–æ–ø—Ä–æ—Å: {args.question}")
        print(f"üõ†Ô∏è  –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {args.tool}")
        print("=" * 60)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–æ–¥—É–ª—è
        print("üìö –ó–∞–≥—Ä—É–∂–∞–µ–º RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã...")
        from rag import tool_llm_encoder, tool_bge_code
        
        # –í—ã–±–∏—Ä–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        if args.tool == "tool_llm_encoder":
            selected_tool = tool_llm_encoder
            tool_name = "LLM Embedder"
        elif args.tool == "tool_bge_code":
            selected_tool = tool_bge_code
            tool_name = "BGE Code"
        else:  # auto
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ø—Ä–æ—Å–∞
            question_lower = args.question.lower()
            if any(keyword in question_lower for keyword in ["–∫–ª–∞—Å—Å", "class", "–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "inheritance", "–∏—Å–ø–æ–ª—å–∑—É–µ—Ç"]):
                selected_tool = tool_llm_encoder
                tool_name = "LLM Embedder (auto-selected for class analysis)"
            else:
                selected_tool = tool_bge_code
                tool_name = "BGE Code (auto-selected)"
        
        if args.verbose:
            print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É–µ–º: {tool_name}")
            print("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å...\n")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
        result = selected_tool.invoke(args.question)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        print("üìã –†–ï–ó–£–õ–¨–¢–ê–¢:")
        print("=" * 60)
        print(result)
        print("=" * 60)
        
        if args.verbose:
            print(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å –ø–æ–º–æ—â—å—é {tool_name}")
            
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª rag.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        if args.verbose:
            import traceback
            traceback.print_exc()
        sys.exit(1)

if __name__ == "__main__":
    main()
