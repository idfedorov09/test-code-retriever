#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã RAG —Å–∏—Å—Ç–µ–º—ã.
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—é—Ç —Ä–∞–∑–Ω—ã–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ–¥–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ.
"""

import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

from rag_base import RAGSystemFactory

def demo_architecture():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã"""
    
    print("üèóÔ∏è  –î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ê–ë–°–¢–†–ê–ö–¢–ù–û–ô RAG –ê–†–•–ò–¢–ï–ö–¢–£–†–´")
    print("=" * 60)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ RAG —Å–∏—Å—Ç–µ–º—ã
    print("\nüìã –î–û–°–¢–£–ü–ù–´–ï RAG –°–ò–°–¢–ï–ú–´:")
    available_systems = RAGSystemFactory.list_available()
    for system in available_systems:
        print(f"  ‚úÖ {system}")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –ø—Ä–æ–µ–∫—Ç–∞
    print("\nüéØ –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –¢–ò–ü–ê –ü–†–û–ï–ö–¢–ê:")
    
    test_projects = [
        "/Users/idfedorov09/my_prog/trash/rag",  # –¢–µ–∫—É—â–∏–π –ø—Ä–æ–µ–∫—Ç
        "/tmp/test_python",  # –ì–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π Python –ø—Ä–æ–µ–∫—Ç
        "/tmp/test_js",      # –ì–∏–ø–æ—Ç–µ—Ç–∏—á–µ—Å–∫–∏–π JS –ø—Ä–æ–µ–∫—Ç
    ]
    
    for project_path in test_projects:
        try:
            detected_type = RAGSystemFactory.detect_project_type(project_path)
            print(f"  üìÅ {project_path} ‚Üí {detected_type}")
        except Exception as e:
            print(f"  ‚ùå {project_path} ‚Üí –æ—à–∏–±–∫–∞: {e}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–∏—è –º–µ–∂–¥—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è–º–∏
    print("\nüîç –†–ê–ó–õ–ò–ß–ò–Ø –ú–ï–ñ–î–£ –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø–ú–ò:")
    
    print("\n  üêç PYTHON RAG:")
    print("    ‚Ä¢ AST –∞–Ω–∞–ª–∏–∑ Python –∫–æ–¥–∞")
    print("    ‚Ä¢ –ì—Ä–∞—Ñ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π (calls/called_by)")
    print("    ‚Ä¢ –ì—Ä–∞—Ñ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤ (inherited_by)")
    print("    ‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è Python")
    print("    ‚Ä¢ –ú–æ–¥–µ–ª—å: BAAI/llm-embedder")
    
    print("\n  üåê UNIVERSAL RAG:")
    print("    ‚Ä¢ –¢–µ–∫—Å—Ç–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑ –ª—é–±—ã—Ö —Ñ–∞–π–ª–æ–≤")
    print("    ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ JS, Docker, YAML, SQL, etc.")
    print("    ‚Ä¢ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞")
    print("    ‚Ä¢ –£–º–Ω–æ–µ —Ä–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏")
    print("    ‚Ä¢ –ú–æ–¥–µ–ª—å: BAAI/bge-code-v1")
    
    print("\n  ü§ñ AUTO RAG:")
    print("    ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–æ–¥—Ö–æ–¥—è—â–µ–π —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏")
    print("    ‚Ä¢ –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞")
    print("    ‚Ä¢ Fallback –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    print("\nüí° –ü–†–ò–ú–ï–†–´ –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Ø:")
    
    examples = [
        ("Python –ø—Ä–æ–µ–∫—Ç", "python", "–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å User?"),
        ("–§—É–ª–ª—Å—Ç–µ–∫ –ø—Ä–æ–µ–∫—Ç", "universal", "–ö–∞–∫–∏–µ –µ—Å—Ç—å Docker —Ñ–∞–π–ª—ã?"),
        ("–õ—é–±–æ–π –ø—Ä–æ–µ–∫—Ç", "auto", "–ü–æ–∫–∞–∂–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞"),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è", "universal", "–ö–∞–∫–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è?"),
        ("–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "auto", "–ï—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é?"),
    ]
    
    for project_type, rag_type, question in examples:
        print(f"\n  üìã {project_type}:")
        print(f"     python cli_new.py \"{question}\" --type={rag_type}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–Ω—ã–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
    print("\nüéØ –ê–†–•–ò–¢–ï–ö–¢–£–†–ù–´–ï –ü–†–ï–ò–ú–£–©–ï–°–¢–í–ê:")
    
    print("\n  ‚úÖ –†–ê–°–®–ò–†–Ø–ï–ú–û–°–¢–¨:")
    print("    ‚Ä¢ –õ–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ —è–∑—ã–∫–∏/—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏")
    print("    ‚Ä¢ –ü—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã")
    print("    ‚Ä¢ –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞")
    
    print("\n  ‚úÖ –ü–ï–†–ï–ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–ï:")
    print("    ‚Ä¢ –û–±—â–∏–µ –±–∞–∑–æ–≤—ã–µ –∫–ª–∞—Å—Å—ã")
    print("    ‚Ä¢ –ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—Å–µ—Ö —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–π")
    print("    ‚Ä¢ –û–±—â–∏–µ —É—Ç–∏–ª–∏—Ç—ã –∏ –ø–∞—Ç—Ç–µ—Ä–Ω—ã")
    
    print("\n  ‚úÖ –ì–ò–ë–ö–û–°–¢–¨:")
    print("    ‚Ä¢ –ú–æ–∂–Ω–æ –∫–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã")
    print("    ‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ –ø–∞—Ä—Å–µ—Ä—ã –∏ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä—ã")
    print("    ‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏")
    
    print("\nüöÄ –ì–û–¢–û–í–û –ö –ò–°–ü–û–õ–¨–ó–û–í–ê–ù–ò–Æ!")
    print("   –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é –∏ –Ω–∞—á–∏–Ω–∞–π—Ç–µ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–µ–∫—Ç—ã!")
    
    return True

def demo_extensibility():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∫–∞–∫ –ª–µ–≥–∫–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é"""
    
    print("\n" + "="*60)
    print("üîß –ö–ê–ö –î–û–ë–ê–í–ò–¢–¨ –ù–û–í–£–Æ –†–ï–ê–õ–ò–ó–ê–¶–ò–Æ")
    print("="*60)
    
    example_code = '''
# –ü—Ä–∏–º–µ—Ä: –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ Go –ø—Ä–æ–µ–∫—Ç–æ–≤

from rag_base import BaseRAGSystem, BaseFileMap
from rag_base import RAGSystemFactory

class GoFileMap(BaseFileMap):
    def __init__(self, path, functions, structs, interfaces):
        self.functions = functions
        self.structs = structs  
        self.interfaces = interfaces
        super().__init__(path, "go", len(content.splitlines()))
    
    def to_text(self):
        # –§–æ—Ä–º–∞—Ç –¥–ª—è Go —Ñ–∞–π–ª–æ–≤
        pass

class GoRAGSystem(BaseRAGSystem):
    def get_file_patterns(self):
        return {"go": "**/*.go"}
    
    def get_evidence_prompt_template(self):
        return "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π Go –∫–æ–¥ —Å —É—á–µ—Ç–æ–º goroutines, channels, interfaces..."
    
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É
RAGSystemFactory.register('go', GoRAGSystem)

# –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
# python cli_new.py "–í–æ–ø—Ä–æ—Å?" --type=go
'''
    
    print(example_code)
    
    print("\n‚ú® –í–°–Å! –ù–æ–≤–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
    print("   –§–∞–±—Ä–∏–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Ö–≤–∞—Ç–∏—Ç –µ—ë –∏ —Å–¥–µ–ª–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π")

if __name__ == "__main__":
    demo_architecture()
    demo_extensibility()
