#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã.
–ü–æ–∑–≤–æ–ª—è–µ—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ.
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

def print_banner():
    print("ü§ñ RAG –°–ò–°–¢–ï–ú–ê –î–õ–Ø –ê–ù–ê–õ–ò–ó–ê PYTHON –ö–û–î–ê")
    print("=" * 50)
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print("  /help     - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
    print("  /tool     - —Å–º–µ–Ω–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
    print("  /status   - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
    print("  /quit     - –≤—ã–π—Ç–∏")
    print("=" * 50)

def print_help():
    print("\nüìñ –°–ü–†–ê–í–ö–ê:")
    print("  ‚Ä¢ –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ")
    print("  ‚Ä¢ –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:")
    print("    - –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å PrefixedDBModel?")
    print("    - –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–∑—ã–≤–∞—é—Ç –º–µ—Ç–æ–¥ render?")
    print("    - –ü–æ–∫–∞–∂–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞")
    print("    - –ì–¥–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–ª–∞—Å—Å User?")
    print("  ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /tool –¥–ª—è —Å–º–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞")
    print()

def select_tool():
    print("\nüõ†Ô∏è  –í–´–ë–û–† –ò–ù–°–¢–†–£–ú–ï–ù–¢–ê:")
    print("1. tool_llm_encoder - –ª—É—á—à–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∞—Å—Å–æ–≤ –∏ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
    print("2. tool_bge_code - –ª—É—á—à–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤—ã–∑–æ–≤–æ–≤ —Ñ—É–Ω–∫—Ü–∏–π")
    print("3. auto - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä")
    
    while True:
        choice = input("–í—ã–±–µ—Ä–∏—Ç–µ (1-3): ").strip()
        if choice == "1":
            return "tool_llm_encoder", "LLM Embedder"
        elif choice == "2":
            return "tool_bge_code", "BGE Code"
        elif choice == "3":
            return "auto", "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ 1, 2 –∏–ª–∏ 3.")

def auto_select_tool(question):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–æ–ø—Ä–æ—Å–∞."""
    question_lower = question.lower()
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–ª–∞—Å—Å–æ–≤
    class_keywords = ["–∫–ª–∞—Å—Å", "class", "–Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", "inheritance", "–∏—Å–ø–æ–ª—å–∑—É–µ—Ç", "inherited", "extends"]
    
    if any(keyword in question_lower for keyword in class_keywords):
        return "tool_llm_encoder", "LLM Embedder (auto: class analysis)"
    else:
        return "tool_bge_code", "BGE Code (auto: function analysis)"

def main():
    print_banner()
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
        print("üìö –ó–∞–≥—Ä—É–∂–∞–µ–º RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã...")
        from rag import tool_llm_encoder, tool_bge_code
        print("‚úÖ –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!\n")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        current_tool_key = "auto"
        current_tool_name = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π"
        
        while True:
            try:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                print(f"üéØ –¢–µ–∫—É—â–∏–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {current_tool_name}")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                question = input("\n‚ùì –í–∞—à –≤–æ–ø—Ä–æ—Å (–∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞): ").strip()
                
                if not question:
                    continue
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
                if question.startswith('/'):
                    command = question.lower()
                    
                    if command == '/help':
                        print_help()
                        continue
                    
                    elif command == '/tool':
                        current_tool_key, current_tool_name = select_tool()
                        print(f"‚úÖ –í—ã–±—Ä–∞–Ω –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {current_tool_name}")
                        continue
                    
                    elif command == '/status':
                        print(f"\nüìä –¢–ï–ö–£–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò:")
                        print(f"  –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {current_tool_name}")
                        print(f"  –ö–ª—é—á: {current_tool_key}")
                        continue
                    
                    elif command in ['/quit', '/exit']:
                        print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                        break
                    
                    else:
                        print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {question}")
                        print("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏")
                        continue
                
                # –í—ã–±–∏—Ä–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                if current_tool_key == "auto":
                    selected_tool_key, tool_display_name = auto_select_tool(question)
                else:
                    selected_tool_key = current_tool_key
                    tool_display_name = current_tool_name
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
                if selected_tool_key == "tool_llm_encoder":
                    selected_tool = tool_llm_encoder
                else:
                    selected_tool = tool_bge_code
                
                print(f"üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø–æ–º–æ—â—å—é {tool_display_name}...")
                print("=" * 50)
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
                result = selected_tool.invoke(question)
                
                # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                print(result)
                print("=" * 50)
                
            except KeyboardInterrupt:
                print("\n\nüëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
                print("üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å")
                
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª rag.py –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        print("üí° –ò —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()
