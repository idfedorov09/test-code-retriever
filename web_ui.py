#!/usr/bin/env python3
"""
–í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞.
–ü—Ä–æ—Å—Ç–æ–π Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –±—Ä–∞—É–∑–µ—Ä.
"""

import sys
import os
from pathlib import Path
from flask import Flask, render_template_string, request, jsonify
import json

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, str(Path(__file__).parent))

app = Flask(__name__)

# HTML —à–∞–±–ª–æ–Ω
HTML_TEMPLATE = """
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>RAG - –ê–Ω–∞–ª–∏–∑ Python –ö–æ–¥–∞</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: #f5f5f5;
        }
        .container {
            background: white;
            border-radius: 10px;
            padding: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        }
        h1 {
            color: #333;
            text-align: center;
            margin-bottom: 30px;
        }
        .form-group {
            margin-bottom: 20px;
        }
        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #555;
        }
        input[type="text"], select, textarea {
            width: 100%;
            padding: 12px;
            border: 2px solid #ddd;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }
        input[type="text"]:focus, select:focus, textarea:focus {
            outline: none;
            border-color: #007bff;
        }
        button {
            background: #007bff;
            color: white;
            border: none;
            padding: 12px 30px;
            border-radius: 8px;
            font-size: 16px;
            cursor: pointer;
            transition: background 0.3s;
        }
        button:hover {
            background: #0056b3;
        }
        button:disabled {
            background: #ccc;
            cursor: not-allowed;
        }
        .result {
            margin-top: 30px;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
            border-left: 4px solid #007bff;
            white-space: pre-wrap;
            font-family: 'Monaco', 'Menlo', monospace;
            font-size: 14px;
            line-height: 1.5;
        }
        .error {
            border-left-color: #dc3545;
            background: #f8d7da;
            color: #721c24;
        }
        .loading {
            text-align: center;
            color: #666;
        }
        .examples {
            margin-top: 20px;
            padding: 15px;
            background: #e9ecef;
            border-radius: 8px;
        }
        .examples h3 {
            margin-top: 0;
            color: #495057;
        }
        .example {
            background: white;
            padding: 8px 12px;
            margin: 5px 0;
            border-radius: 4px;
            cursor: pointer;
            transition: background 0.2s;
        }
        .example:hover {
            background: #f8f9fa;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>ü§ñ RAG - –ê–Ω–∞–ª–∏–∑ Python –ö–æ–¥–∞</h1>
        
        <form id="questionForm">
            <div class="form-group">
                <label for="question">–í–∞—à –≤–æ–ø—Ä–æ—Å:</label>
                <input type="text" id="question" name="question" placeholder="–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å PrefixedDBModel?" required>
            </div>
            
            <div class="form-group">
                <label for="rag_type">–¢–∏–ø RAG —Å–∏—Å—Ç–µ–º—ã:</label>
                <select id="rag_type" name="rag_type">
                    <option value="auto">ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä</option>
                    <option value="python">üêç Python (AST –∞–Ω–∞–ª–∏–∑)</option>
                    <option value="universal">üåê –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π (–≤—Å–µ —Ñ–∞–π–ª—ã)</option>
                </select>
            </div>
            
            <div class="form-group">
                <label for="use_gpu">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ GPU:</label>
                <select id="use_gpu" name="use_gpu">
                    <option value="auto">‚ö° –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏</option>
                    <option value="true">üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ GPU</option>
                    <option value="false">üêå –¢–æ–ª—å–∫–æ CPU</option>
                </select>
            </div>
            
            <button type="submit">üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å</button>
        </form>
        
        <div class="examples">
            <h3>üí° –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:</h3>
            <div class="example" onclick="setQuestion('–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å PrefixedDBModel?')">
                –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–ª–∞—Å—Å PrefixedDBModel?
            </div>
            <div class="example" onclick="setQuestion('–ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–∑—ã–≤–∞—é—Ç –º–µ—Ç–æ–¥ render?')">
                –ö–∞–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤—ã–∑—ã–≤–∞—é—Ç –º–µ—Ç–æ–¥ render?
            </div>
            <div class="example" onclick="setQuestion('–ü–æ–∫–∞–∂–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞')">
                –ü–æ–∫–∞–∂–∏ –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É –ø—Ä–æ–µ–∫—Ç–∞
            </div>
            <div class="example" onclick="setQuestion('–ö–∞–∫–∏–µ –µ—Å—Ç—å Docker —Ñ–∞–π–ª—ã?')">
                –ö–∞–∫–∏–µ –µ—Å—Ç—å Docker —Ñ–∞–π–ª—ã?
            </div>
            <div class="example" onclick="setQuestion('–ï—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é?')">
                –ï—Å—Ç—å –ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å—é?
            </div>
        </div>
        
        <div id="project-info" style="margin-top: 20px; padding: 15px; background: #f8f9fa; border-radius: 8px; display: none;">
            <h3>üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–µ–∫—Ç–µ</h3>
            <div id="project-details"></div>
        </div>
        
        <div id="result" class="result" style="display: none;"></div>
    </div>

    <script>
        function setQuestion(question) {
            document.getElementById('question').value = question;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        window.addEventListener('load', async function() {
            try {
                const response = await fetch('/project-info');
                const projectInfo = await response.json();
                
                if (projectInfo && !projectInfo.error) {
                    const projectInfoDiv = document.getElementById('project-info');
                    const projectDetailsDiv = document.getElementById('project-details');
                    
                    let detailsHtml = `
                        <p><strong>üéØ –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø:</strong> ${projectInfo.main_type.toUpperCase()}</p>
                        <p><strong>üîß –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</strong> ${projectInfo.detected_types.join(', ')}</p>
                    `;
                    
                    if (projectInfo.is_multi_tech) {
                        detailsHtml += '<p><strong>üì¶ –ú—É–ª—å—Ç–∏-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–Ω—ã–π –ø—Ä–æ–µ–∫—Ç</strong></p>';
                    }
                    
                    if (projectInfo.file_stats) {
                        const topExtensions = Object.entries(projectInfo.file_stats)
                            .sort((a, b) => b[1] - a[1])
                            .slice(0, 5);
                        
                        detailsHtml += '<p><strong>üìÅ –¢–æ–ø —Ñ–∞–π–ª–æ–≤:</strong> ';
                        detailsHtml += topExtensions.map(([ext, count]) => `${ext} (${count})`).join(', ');
                        detailsHtml += '</p>';
                    }
                    
                    projectDetailsDiv.innerHTML = detailsHtml;
                    projectInfoDiv.style.display = 'block';
                }
            } catch (error) {
                console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ:', error);
            }
        });
        
        document.getElementById('questionForm').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const question = formData.get('question');
            const rag_type = formData.get('rag_type');
            const use_gpu = formData.get('use_gpu');
            
            const resultDiv = document.getElementById('result');
            const submitButton = document.querySelector('button[type="submit"]');
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
            resultDiv.style.display = 'block';
            resultDiv.className = 'result loading';
            resultDiv.textContent = 'üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–¥... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.';
            submitButton.disabled = true;
            
            try {
                const response = await fetch('/analyze', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ question, rag_type, use_gpu })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    resultDiv.className = 'result';
                    let resultText = data.result;
                    
                    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ –µ—Å–ª–∏ –µ—Å—Ç—å
                    if (data.project_info) {
                        const info = data.project_info;
                        resultText = `üéØ –ü—Ä–æ–µ–∫—Ç: ${info.main_type.toUpperCase()}` + 
                                   (info.is_multi_tech ? ` (–º—É–ª—å—Ç–∏-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: ${info.detected_types.join(', ')})` : '') + 
                                   `\\nüìä –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Å–∏—Å—Ç–µ–º–∞: ${data.rag_system}\\n\\n` + resultText;
                    }
                    
                    resultDiv.textContent = resultText;
                } else {
                    resultDiv.className = 'result error';
                    resultDiv.textContent = '‚ùå –û—à–∏–±–∫–∞: ' + data.error;
                }
            } catch (error) {
                resultDiv.className = 'result error';
                resultDiv.textContent = '‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ' + error.message;
            } finally {
                submitButton.disabled = false;
            }
        });
    </script>
</body>
</html>
"""

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
rag_tools = {}
project_info = None

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä GPU –ø–∞–º—è—Ç–∏
try:
    from gpu_utils import gpu_manager, cleanup_gpu, monitor_gpu
    GPU_UTILS_AVAILABLE = True
except ImportError:
    GPU_UTILS_AVAILABLE = False
    print("‚ö†Ô∏è  GPU —É—Ç–∏–ª–∏—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

def init_tools():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π."""
    global rag_tools, project_info
    
    try:
        import os
        from rag_main import create_rag_tool
        from rag_base import RAGSystemFactory
        
        # –û—á–∏—â–∞–µ–º GPU –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
        if GPU_UTILS_AVAILABLE:
            print("üßπ –û—á–∏—Å—Ç–∫–∞ GPU –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π...")
            cleanup_gpu()
            monitor_gpu()
        
        project_path = os.getenv('TEST_PROJ_PATH')
        if not project_path:
            print("‚ùå –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è TEST_PROJ_PATH")
            return False
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ
        project_info = RAGSystemFactory.get_project_info(project_path)
        print(f"üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏: {', '.join(project_info['detected_types'])}")
        print(f"üìä –û—Å–Ω–æ–≤–Ω–æ–π —Ç–∏–ø: {project_info['main_type']}")
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
        available_types = ['python', 'universal', 'auto']
        
        for rag_type in available_types:
            try:
                print(f"üîß –°–æ–∑–¥–∞–µ–º {rag_type.upper()} RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞
                if GPU_UTILS_AVAILABLE and gpu_manager.check_memory_threshold(80):
                    print("‚ö†Ô∏è  –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É...")
                    cleanup_gpu()
                
                tool = create_rag_tool(
                    project_path=project_path,
                    rag_type=rag_type,
                    use_gpu=None  # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ
                )
                rag_tools[rag_type] = tool
                print(f"‚úÖ {rag_type.upper()} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤")
                
                # –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
                if GPU_UTILS_AVAILABLE:
                    monitor_gpu()
                
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å {rag_type} –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç: {e}")
                if GPU_UTILS_AVAILABLE:
                    cleanup_gpu()  # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        
        return len(rag_tools) > 0
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –Ω–æ–≤–æ–π RAG –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        if GPU_UTILS_AVAILABLE:
            cleanup_gpu()
        return False

def select_rag_tool(rag_type, question):
    """–í—ã–±–æ—Ä RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞."""
    if rag_type == "auto":
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–µ–∫—Ç–∞
        if project_info:
            main_type = project_info['main_type']
            if main_type in rag_tools:
                return rag_tools[main_type], f"Auto-selected {main_type.upper()}"
        
        # Fallback –Ω–∞ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π
        return rag_tools.get('universal'), "Auto-selected UNIVERSAL"
    
    elif rag_type in rag_tools:
        return rag_tools[rag_type], rag_type.upper()
    
    else:
        # Fallback –Ω–∞ –ª—é–±–æ–π –¥–æ—Å—Ç—É–ø–Ω—ã–π
        if rag_tools:
            fallback_type = list(rag_tools.keys())[0]
            return rag_tools[fallback_type], f"Fallback to {fallback_type.upper()}"
    
    return None, "No tool available"

@app.route('/')
def index():
    return render_template_string(HTML_TEMPLATE)

@app.route('/analyze', methods=['POST'])
def analyze():
    try:
        data = request.json
        question = data.get('question', '').strip()
        rag_type = data.get('rag_type', 'auto')
        use_gpu = data.get('use_gpu', 'auto')
        
        if not question:
            return jsonify({'success': False, 'error': '–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'})
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–∞–º—è—Ç–∏ –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º
        if GPU_UTILS_AVAILABLE:
            if gpu_manager.check_memory_threshold(85):
                print("‚ö†Ô∏è  –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ—á–∏—Å—Ç–∫—É...")
                cleanup_gpu()
        
        # –í—ã–±–∏—Ä–∞–µ–º RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç
        selected_tool, rag_system_name = select_rag_tool(rag_type, question)
        
        if not selected_tool:
            return jsonify({
                'success': False, 
                'error': '–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç'
            })
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–Ω–∞–ª–∏–∑
        result = selected_tool.invoke(question)
        
        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if GPU_UTILS_AVAILABLE:
            cleanup_gpu()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–º—è—Ç–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞
        memory_info = {}
        if GPU_UTILS_AVAILABLE:
            memory_info = gpu_manager.get_gpu_memory_info()
        
        return jsonify({
            'success': True,
            'result': result,
            'rag_system': rag_system_name,
            'project_info': project_info,
            'memory_info': memory_info,
            'settings': {
                'rag_type': rag_type,
                'use_gpu': use_gpu
            }
        })
        
    except Exception as e:
        # –û—á–∏—â–∞–µ–º –ø–∞–º—è—Ç—å –ø—Ä–∏ –æ—à–∏–±–∫–µ
        if GPU_UTILS_AVAILABLE:
            cleanup_gpu()
        
        return jsonify({
            'success': False,
            'error': str(e)
        })

@app.route('/health')
def health():
    return jsonify({
        'status': 'ok', 
        'tools_loaded': len(rag_tools) > 0,
        'available_rag_systems': list(rag_tools.keys()),
        'project_info': project_info
    })

@app.route('/project-info')
def get_project_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ"""
    return jsonify(project_info if project_info else {'error': 'Project not analyzed'})

@app.route('/memory-info')
def get_memory_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ GPU –ø–∞–º—è—Ç–∏"""
    if GPU_UTILS_AVAILABLE:
        return jsonify(gpu_manager.get_gpu_memory_info())
    else:
        return jsonify({'gpu_available': False, 'error': 'GPU utilities not available'})

@app.route('/cleanup-memory', methods=['POST'])
def cleanup_memory():
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ GPU –ø–∞–º—è—Ç–∏"""
    if GPU_UTILS_AVAILABLE:
        try:
            cleanup_gpu()
            memory_info = gpu_manager.get_gpu_memory_info()
            return jsonify({
                'success': True, 
                'message': '–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞',
                'memory_info': memory_info
            })
        except Exception as e:
            return jsonify({'success': False, 'error': str(e)})
    else:
        return jsonify({'success': False, 'error': 'GPU utilities not available'})

def cleanup_on_exit():
    """–û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã"""
    print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ä–µ—Å—É—Ä—Å–æ–≤...")
    
    if GPU_UTILS_AVAILABLE:
        try:
            from gpu_utils import aggressive_cleanup_gpu
            aggressive_cleanup_gpu()
            print("‚úÖ GPU –ø–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ GPU: {e}")
    
    # –û—á–∏—â–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    global rag_tools
    rag_tools.clear()
    
    import gc
    gc.collect()
    print("‚úÖ –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã")

if __name__ == '__main__':
    import signal
    import atexit
    import sys
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    atexit.register(cleanup_on_exit)
    
    def signal_handler(sig, frame):
        print("\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è...")
        cleanup_on_exit()
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    print("üöÄ –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ RAG —Å–∏—Å—Ç–µ–º—ã...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
    if not init_tools():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        sys.exit(1)
    
    print("‚úÖ RAG –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print("üåê –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:5000")
    print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    try:
        app.run(debug=False, host='0.0.0.0', port=5000)
    except KeyboardInterrupt:
        print("\nüõë –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    finally:
        cleanup_on_exit()
