#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ RAG —Å–∏—Å—Ç–µ–º–µ.
"""

import os
import sys
from pathlib import Path

def test_gpu_availability():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU."""
    print("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU...")
    
    try:
        import torch
        gpu_available = torch.cuda.is_available()
        device = "cuda" if gpu_available else "cpu"
        
        print(f"üöÄ Device: {device}")
        
        if gpu_available:
            print(f"üì± GPU: {torch.cuda.get_device_name(0)}")
            print(f"üíæ VRAM: {torch.cuda.get_device_properties(0).total_memory / 1024**3:.1f} GB")
            print(f"üî¢ CUDA Version: {torch.version.cuda}")
            
            # –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –Ω–∞ GPU
            x = torch.randn(1000, 1000).to(device)
            y = torch.randn(1000, 1000).to(device)
            z = torch.mm(x, y)
            print("‚úÖ –ë–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ PyTorch –Ω–∞ GPU —Ä–∞–±–æ—Ç–∞—é—Ç")
            
        else:
            print("‚ö†Ô∏è  GPU –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU")
            
        return gpu_available
        
    except ImportError:
        print("‚ùå PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ GPU: {e}")
        return False

def test_faiss_gpu():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∫—É FAISS-GPU."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º FAISS GPU –ø–æ–¥–¥–µ—Ä–∂–∫—É...")
    
    try:
        import faiss
        print(f"üì¶ FAISS –≤–µ—Ä—Å–∏—è: {faiss.__version__}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GPU —Ñ—É–Ω–∫—Ü–∏–π
        if hasattr(faiss, 'StandardGpuResources'):
            print("‚úÖ FAISS-GPU –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # –¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è GPU –∏–Ω–¥–µ–∫—Å–∞
            try:
                res = faiss.StandardGpuResources()
                dimension = 384  # –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∏–Ω–¥–µ–∫—Å –Ω–∞ GPU
                cpu_index = faiss.IndexFlatIP(dimension)
                gpu_index = faiss.index_cpu_to_gpu(res, 0, cpu_index)
                print("‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ GPU –∏–Ω–¥–µ–∫—Å–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è GPU –∏–Ω–¥–µ–∫—Å–∞: {e}")
                
        else:
            print("‚ùå FAISS-GPU –Ω–µ –Ω–∞–π–¥–µ–Ω, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ CPU –≤–µ—Ä—Å–∏—è")
            
    except ImportError:
        print("‚ùå FAISS –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ FAISS: {e}")

def test_sentence_transformers_gpu():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É sentence-transformers –Ω–∞ GPU."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä—è–µ–º Sentence Transformers GPU –ø–æ–¥–¥–µ—Ä–∂–∫—É...")
    
    try:
        from sentence_transformers import SentenceTransformer
        import torch
        
        device = "cuda" if torch.cuda.is_available() else "cpu"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–µ–≥–∫—É—é –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        model = SentenceTransformer('all-MiniLM-L6-v2', device=device)
        
        print(f"üéØ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞: {model.device}")
        
        # –¢–µ—Å—Ç —ç–Ω–∫–æ–¥–∏–Ω–≥–∞
        sentences = ["This is a test sentence.", "Another test sentence."]
        embeddings = model.encode(sentences)
        
        print(f"‚úÖ –≠–Ω–∫–æ–¥–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å: {embeddings.shape}")
        
    except ImportError:
        print("‚ùå sentence-transformers –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ sentence-transformers: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã")
    print("=" * 50)
    
    gpu_available = test_gpu_availability()
    test_faiss_gpu()
    test_sentence_transformers_gpu()
    
    print("\n" + "=" * 50)
    print("üìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ:")
    
    if not gpu_available:
        print("1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ CUDA Toolkit")
        print("2. –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ PyTorch —Å CUDA –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:")
        print("   pip install torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu121")
    
    print("3. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è GPU:")
    print("   pip install faiss-gpu sentence-transformers accelerate")
    
    print("\n‚ú® –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å–∫–∞—Ç—å RAG –Ω–∞ GPU")

if __name__ == "__main__":
    main()
